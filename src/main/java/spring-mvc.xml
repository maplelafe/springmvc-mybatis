<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:jaxws="http://cxf.apache.org/jaxws"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd
         http://www.springframework.org/schema/context 
         http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/mvc
         http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://cxf.apache.org/jaxws 
        http://cxf.apache.org/schemas/jaxws.xsd">


	
	<!-- 配置必须在 <mvc:annotation-driven /> 之前，否则将不会启效 -->
	<!-- 服务器端发送数据到浏览器乱码问题:java文件是以UTF-8形式存储的，然后指定StringHttpMessageConverter或者@RequestMapping的produces的编码方式为UTF-8，最后发给浏览器的header中的content-type也为UTF-8，这样才不会乱码 -->
	<bean id="utf8StringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean> 
	<!-- 静态资源的解析 -->
    <mvc:resources location="/js/" mapping="/js/**"></mvc:resources> 
    <mvc:resources location="/img/" mapping="/img/**"></mvc:resources> 
     <mvc:resources mapping="/css/**" location="/css/" /> 
     <!--SpringMVC的配置，包含网站跳转逻辑的控制配置
    <context:component-scan base-package="com.peny.controller" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:include-filter>
    </context:component-scan>-->
    <context:component-scan base-package="com.peny.controller"></context:component-scan>
     
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">  
	        <list>  
	            <ref bean="mappingJacksonHttpMessageConverter"/>  
	            <ref bean="utf8StringHttpMessageConverter"/>
	        </list>  
    	</property> 
	</bean>-->
	
	
	<!-- 另外最好还要加入DefaultAnnotationHandlerMapping，不然会被 XML或其它的映射覆盖！ 
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
	
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">  
	    <property name="supportedMediaTypes">  
	        <list>  
				<value>text/plain;charset=UTF-8</value>
	            <value>text/html;charset=UTF-8</value>  
	            <value>application/json;charset=UTF-8</value>
	        </list>  
	    </property>  
	</bean> --> 

	
	  <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="com.peny.controller.convert.StringDateConvert">
                    <constructor-arg type="java.lang.String" value="yyyy-MM-dd"></constructor-arg>
                </bean>
            </list>
        </property>
    </bean>
    

   
   <!--interceptor拦截器  -->
    <mvc:interceptors>
        	<!-- 多个拦截器顺序执行 -->
        	<mvc:interceptor> 
    	<!-- 拦截所有url，包括子url -->
    		<mvc:mapping path="/**"/>
    		<bean class="com.peny.interceptor.LoginInterceptor"></bean>
    	</mvc:interceptor>
    	<mvc:interceptor> 
    	<!-- 拦截所有url，包括子url -->
    		<mvc:mapping path="/**"/>
    		<bean class="com.peny.interceptor.HandlerInterceptor1"></bean>
    	</mvc:interceptor>
    	<mvc:interceptor>
    		<mvc:mapping path="/**"/>
    		<bean class="com.peny.interceptor.HandlerInterceptor2"></bean>
    	</mvc:interceptor>
    </mvc:interceptors>
    
<!-- hibernate validate 校验框架 -->
   <bean id="hibernate_validator_messages" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>classpath:validator/hibernate_validator_message</value>
            </list>
        </property>
        <!-- 资源文件编码格式,java获取会导致乱码
        <property name="fileEncodings" value="UTF-8" /> -->
        <!-- 对资源文件内容缓存时间，单位秒 -->
        <property name="cacheSeconds" value="120" />
        <!--不会乱码 -->
         <property name="fileEncodings">
            <props>
                <prop key="classpath:validator/hibernate_validator_message">UTF-8</prop>
            </props>
        </property>
    </bean>

    
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
      	<!-- 校验器 -->
 		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
        <!-- 指定使用的资源文件，默认classpath下的ValidatorMessages.properties -->
        <property name="validationMessageSource" ref="hibernate_validator_messages"/>
    </bean>

	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 --> 
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
		<property name="prefix" value="/WEB-INF/pages/"/>
		<property name="suffix" value=".jsp"/>
	</bean>

	<!-- 支持上传文件 -->  
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<property name="maxUploadSize" value="5242880"><!-- 最大文件上传5M -->
    	</property>
    </bean>
    
    <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"></bean>
 
    <bean class="com.peny.exception.GoodExceptionResovler"></bean>
    <!-- 当配置了<mvc:annotation-driven/>后，会自动加载org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping和org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter，所以如果显示的配置则需去掉配置<mvc:annotation-driven/> -->
	   <mvc:annotation-driven conversion-service="conversionService" validator="validator"/>   
</beans>